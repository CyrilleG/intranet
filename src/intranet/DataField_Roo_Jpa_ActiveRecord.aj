// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.DataField;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DataField_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager DataField.entityManager;
    
    public static final EntityManager DataField.entityManager() {
        EntityManager em = new DataField().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long DataField.countDataFields() {
        return entityManager().createQuery("SELECT COUNT(o) FROM DataField o", Long.class).getSingleResult();
    }
    
    public static List<DataField> DataField.findAllDataFields() {
        return entityManager().createQuery("SELECT o FROM DataField o", DataField.class).getResultList();
    }
    
    public static DataField DataField.findDataField(Integer fields) {
        if (fields == null) return null;
        return entityManager().find(DataField.class, fields);
    }
    
    public static List<DataField> DataField.findDataFieldEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM DataField o", DataField.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void DataField.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void DataField.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            DataField attached = DataField.findDataField(this.fields);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void DataField.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void DataField.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public DataField DataField.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        DataField merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
