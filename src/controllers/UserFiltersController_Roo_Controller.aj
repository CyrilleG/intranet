// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package controllers;

import controllers.UserFiltersController;
import intranet.Filter;
import intranet.User;
import intranet.UserFilters;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;


import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UserFiltersController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UserFiltersController.create(@Valid UserFilters userFilters, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userFilters);
            return "userfilterses/create";
        }
        uiModel.asMap().clear();
        userFilters.persist();
        return "redirect:/userfilterses/" + encodeUrlPathSegment(userFilters.getIduserFilters().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UserFiltersController.createForm(Model uiModel) {
        populateEditForm(uiModel, new UserFilters());
        return "userfilterses/create";
    }
    
    @RequestMapping(value = "/{iduserFilters}", produces = "text/html")
    public String UserFiltersController.show(@PathVariable("iduserFilters") Integer iduserFilters, Model uiModel) {
        uiModel.addAttribute("userfilters", UserFilters.findUserFilters(iduserFilters));
        uiModel.addAttribute("itemId", iduserFilters);
        return "userfilterses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UserFiltersController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("userfilterses", UserFilters.findUserFiltersEntries(firstResult, sizeNo));
            float nrOfPages = (float) UserFilters.countUserFilterses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("userfilterses", UserFilters.findAllUserFilterses());
        }
        return "userfilterses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UserFiltersController.update(@Valid UserFilters userFilters, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userFilters);
            return "userfilterses/update";
        }
        uiModel.asMap().clear();
        userFilters.merge();
        return "redirect:/userfilterses/" + encodeUrlPathSegment(userFilters.getIduserFilters().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{iduserFilters}", params = "form", produces = "text/html")
    public String UserFiltersController.updateForm(@PathVariable("iduserFilters") Integer iduserFilters, Model uiModel) {
        populateEditForm(uiModel, UserFilters.findUserFilters(iduserFilters));
        return "userfilterses/update";
    }
    
    @RequestMapping(value = "/{iduserFilters}", method = RequestMethod.DELETE, produces = "text/html")
    public String UserFiltersController.delete(@PathVariable("iduserFilters") Integer iduserFilters, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        UserFilters userFilters = UserFilters.findUserFilters(iduserFilters);
        userFilters.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/userfilterses";
    }
    
    void UserFiltersController.populateEditForm(Model uiModel, UserFilters userFilters) {
        uiModel.addAttribute("userFilters", userFilters);
        uiModel.addAttribute("filters", Filter.findAllFilters());
        uiModel.addAttribute("users", User.findAllUsers());
    }
    
    String UserFiltersController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
