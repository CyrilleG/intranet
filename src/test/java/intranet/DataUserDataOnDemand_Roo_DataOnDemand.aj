// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.AppUser;
import intranet.AppUserDataOnDemand;
import intranet.DataUser;
import intranet.DataUserDataOnDemand;
import intranet.ModuleData;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DataUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DataUserDataOnDemand: @Component;
    
    private Random DataUserDataOnDemand.rnd = new SecureRandom();
    
    private List<DataUser> DataUserDataOnDemand.data;
    
    @Autowired
    private AppUserDataOnDemand DataUserDataOnDemand.appUserDataOnDemand;
    
    public DataUser DataUserDataOnDemand.getNewTransientDataUser(int index) {
        DataUser obj = new DataUser();
        setData(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void DataUserDataOnDemand.setData(DataUser obj, int index) {
        ModuleData data = null;
        obj.setData(data);
    }
    
    public void DataUserDataOnDemand.setUser(DataUser obj, int index) {
        AppUser user = appUserDataOnDemand.getRandomAppUser();
        obj.setUser(user);
    }
    
    public DataUser DataUserDataOnDemand.getSpecificDataUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DataUser obj = data.get(index);
        Integer id = obj.getDataUser();
        return DataUser.findDataUser(id);
    }
    
    public DataUser DataUserDataOnDemand.getRandomDataUser() {
        init();
        DataUser obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getDataUser();
        return DataUser.findDataUser(id);
    }
    
    public boolean DataUserDataOnDemand.modifyDataUser(DataUser obj) {
        return false;
    }
    
    public void DataUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = DataUser.findDataUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DataUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DataUser>();
        for (int i = 0; i < 10; i++) {
            DataUser obj = getNewTransientDataUser(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
