// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.DataRight;
import intranet.DataRightDataOnDemand;
import intranet.DataRightIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DataRightIntegrationTest_Roo_IntegrationTest {
    
    declare @type: DataRightIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: DataRightIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: DataRightIntegrationTest: @Transactional;
    
    @Autowired
    private DataRightDataOnDemand DataRightIntegrationTest.dod;
    
    @Test
    public void DataRightIntegrationTest.testCountDataRights() {
        Assert.assertNotNull("Data on demand for 'DataRight' failed to initialize correctly", dod.getRandomDataRight());
        long count = DataRight.countDataRights();
        Assert.assertTrue("Counter for 'DataRight' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void DataRightIntegrationTest.testFindDataRight() {
        DataRight obj = dod.getRandomDataRight();
        Assert.assertNotNull("Data on demand for 'DataRight' failed to initialize correctly", obj);
        Integer id = obj.getDataRight();
        Assert.assertNotNull("Data on demand for 'DataRight' failed to provide an identifier", id);
        obj = DataRight.findDataRight(id);
        Assert.assertNotNull("Find method for 'DataRight' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'DataRight' returned the incorrect identifier", id, obj.getDataRight());
    }
    
    @Test
    public void DataRightIntegrationTest.testFindAllDataRights() {
        Assert.assertNotNull("Data on demand for 'DataRight' failed to initialize correctly", dod.getRandomDataRight());
        long count = DataRight.countDataRights();
        Assert.assertTrue("Too expensive to perform a find all test for 'DataRight', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<DataRight> result = DataRight.findAllDataRights();
        Assert.assertNotNull("Find all method for 'DataRight' illegally returned null", result);
        Assert.assertTrue("Find all method for 'DataRight' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void DataRightIntegrationTest.testFindDataRightEntries() {
        Assert.assertNotNull("Data on demand for 'DataRight' failed to initialize correctly", dod.getRandomDataRight());
        long count = DataRight.countDataRights();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<DataRight> result = DataRight.findDataRightEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'DataRight' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'DataRight' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void DataRightIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'DataRight' failed to initialize correctly", dod.getRandomDataRight());
        DataRight obj = dod.getNewTransientDataRight(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'DataRight' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'DataRight' identifier to be null", obj.getDataRight());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'DataRight' identifier to no longer be null", obj.getDataRight());
    }
    
    @Test
    public void DataRightIntegrationTest.testRemove() {
        DataRight obj = dod.getRandomDataRight();
        Assert.assertNotNull("Data on demand for 'DataRight' failed to initialize correctly", obj);
        Integer id = obj.getDataRight();
        Assert.assertNotNull("Data on demand for 'DataRight' failed to provide an identifier", id);
        obj = DataRight.findDataRight(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'DataRight' with identifier '" + id + "'", DataRight.findDataRight(id));
    }
    
}
