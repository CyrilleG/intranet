// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.DataField;
import intranet.DataFieldDataOnDemand;
import intranet.ModuleData;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect DataFieldDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DataFieldDataOnDemand: @Component;
    
    private Random DataFieldDataOnDemand.rnd = new SecureRandom();
    
    private List<DataField> DataFieldDataOnDemand.data;
    
    public DataField DataFieldDataOnDemand.getNewTransientDataField(int index) {
        DataField obj = new DataField();
        setModuleData(obj, index);
        setName(obj, index);
        setType(obj, index);
        setValue(obj, index);
        return obj;
    }
    
    public void DataFieldDataOnDemand.setModuleData(DataField obj, int index) {
        ModuleData moduleData = null;
        obj.setModuleData(moduleData);
    }
    
    public void DataFieldDataOnDemand.setName(DataField obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void DataFieldDataOnDemand.setType(DataField obj, int index) {
        String type = "type_" + index;
        if (type.length() > 45) {
            type = type.substring(0, 45);
        }
        obj.setType(type);
    }
    
    public void DataFieldDataOnDemand.setValue(DataField obj, int index) {
        String value = "value_" + index;
        if (value.length() > 255) {
            value = value.substring(0, 255);
        }
        obj.setValue(value);
    }
    
    public DataField DataFieldDataOnDemand.getSpecificDataField(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DataField obj = data.get(index);
        Integer id = obj.getFields();
        return DataField.findDataField(id);
    }
    
    public DataField DataFieldDataOnDemand.getRandomDataField() {
        init();
        DataField obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getFields();
        return DataField.findDataField(id);
    }
    
    public boolean DataFieldDataOnDemand.modifyDataField(DataField obj) {
        return false;
    }
    
    public void DataFieldDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = DataField.findDataFieldEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DataField' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DataField>();
        for (int i = 0; i < 10; i++) {
            DataField obj = getNewTransientDataField(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
