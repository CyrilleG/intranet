// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.Action;
import intranet.ActionDataOnDemand;
import intranet.Module;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ActionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ActionDataOnDemand: @Component;
    
    private Random ActionDataOnDemand.rnd = new SecureRandom();
    
    private List<Action> ActionDataOnDemand.data;
    
    public Action ActionDataOnDemand.getNewTransientAction(int index) {
        Action obj = new Action();
        setIdmodule(obj, index);
        setMethod(obj, index);
        setTemplate(obj, index);
        return obj;
    }
    
    public void ActionDataOnDemand.setIdmodule(Action obj, int index) {
        Module idmodule = null;
        obj.setIdmodule(idmodule);
    }
    
    public void ActionDataOnDemand.setMethod(Action obj, int index) {
        String method = "method_" + index;
        if (method.length() > 100) {
            method = method.substring(0, 100);
        }
        obj.setMethod(method);
    }
    
    public void ActionDataOnDemand.setTemplate(Action obj, int index) {
        String template = "template_" + index;
        if (template.length() > 100) {
            template = template.substring(0, 100);
        }
        obj.setTemplate(template);
    }
    
    public Action ActionDataOnDemand.getSpecificAction(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Action obj = data.get(index);
        Integer id = obj.getIdaction();
        return Action.findAction(id);
    }
    
    public Action ActionDataOnDemand.getRandomAction() {
        init();
        Action obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getIdaction();
        return Action.findAction(id);
    }
    
    public boolean ActionDataOnDemand.modifyAction(Action obj) {
        return false;
    }
    
    public void ActionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Action.findActionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Action' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Action>();
        for (int i = 0; i < 10; i++) {
            Action obj = getNewTransientAction(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
