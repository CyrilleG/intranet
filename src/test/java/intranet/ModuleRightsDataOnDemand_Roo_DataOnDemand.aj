// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.Group;
import intranet.GroupDataOnDemand;
import intranet.ModuleRights;
import intranet.ModuleRightsDataOnDemand;
import intranet.Right;
import intranet.RightDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ModuleRightsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ModuleRightsDataOnDemand: @Component;
    
    private Random ModuleRightsDataOnDemand.rnd = new SecureRandom();
    
    private List<ModuleRights> ModuleRightsDataOnDemand.data;
    
    @Autowired
    private GroupDataOnDemand ModuleRightsDataOnDemand.groupDataOnDemand;
    
    @Autowired
    private RightDataOnDemand ModuleRightsDataOnDemand.rightDataOnDemand;
    
    public ModuleRights ModuleRightsDataOnDemand.getNewTransientModuleRights(int index) {
        ModuleRights obj = new ModuleRights();
        setIdmodule(obj, index);
        setIdright(obj, index);
        return obj;
    }
    
    public void ModuleRightsDataOnDemand.setIdmodule(ModuleRights obj, int index) {
        Group idmodule = groupDataOnDemand.getRandomGroup();
        obj.setIdmodule(idmodule);
    }
    
    public void ModuleRightsDataOnDemand.setIdright(ModuleRights obj, int index) {
        Right idright = rightDataOnDemand.getRandomRight();
        obj.setIdright(idright);
    }
    
    public ModuleRights ModuleRightsDataOnDemand.getSpecificModuleRights(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ModuleRights obj = data.get(index);
        Integer id = obj.getIdmoduleRight();
        return ModuleRights.findModuleRights(id);
    }
    
    public ModuleRights ModuleRightsDataOnDemand.getRandomModuleRights() {
        init();
        ModuleRights obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getIdmoduleRight();
        return ModuleRights.findModuleRights(id);
    }
    
    public boolean ModuleRightsDataOnDemand.modifyModuleRights(ModuleRights obj) {
        return false;
    }
    
    public void ModuleRightsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ModuleRights.findModuleRightsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ModuleRights' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ModuleRights>();
        for (int i = 0; i < 10; i++) {
            ModuleRights obj = getNewTransientModuleRights(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
