// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.Action;
import intranet.ActionDataOnDemand;
import intranet.ActionGroups;
import intranet.ActionGroupsDataOnDemand;
import intranet.Group;
import intranet.GroupDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ActionGroupsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ActionGroupsDataOnDemand: @Component;
    
    private Random ActionGroupsDataOnDemand.rnd = new SecureRandom();
    
    private List<ActionGroups> ActionGroupsDataOnDemand.data;
    
    @Autowired
    private ActionDataOnDemand ActionGroupsDataOnDemand.actionDataOnDemand;
    
    @Autowired
    private GroupDataOnDemand ActionGroupsDataOnDemand.groupDataOnDemand;
    
    public ActionGroups ActionGroupsDataOnDemand.getNewTransientActionGroups(int index) {
        ActionGroups obj = new ActionGroups();
        setIdaction(obj, index);
        setIdgroup(obj, index);
        return obj;
    }
    
    public void ActionGroupsDataOnDemand.setIdaction(ActionGroups obj, int index) {
        Action idaction = actionDataOnDemand.getRandomAction();
        obj.setIdaction(idaction);
    }
    
    public void ActionGroupsDataOnDemand.setIdgroup(ActionGroups obj, int index) {
        Group idgroup = groupDataOnDemand.getRandomGroup();
        obj.setIdgroup(idgroup);
    }
    
    public ActionGroups ActionGroupsDataOnDemand.getSpecificActionGroups(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ActionGroups obj = data.get(index);
        Integer id = obj.getIdactionGroup();
        return ActionGroups.findActionGroups(id);
    }
    
    public ActionGroups ActionGroupsDataOnDemand.getRandomActionGroups() {
        init();
        ActionGroups obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getIdactionGroup();
        return ActionGroups.findActionGroups(id);
    }
    
    public boolean ActionGroupsDataOnDemand.modifyActionGroups(ActionGroups obj) {
        return false;
    }
    
    public void ActionGroupsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ActionGroups.findActionGroupsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ActionGroups' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ActionGroups>();
        for (int i = 0; i < 10; i++) {
            ActionGroups obj = getNewTransientActionGroups(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
