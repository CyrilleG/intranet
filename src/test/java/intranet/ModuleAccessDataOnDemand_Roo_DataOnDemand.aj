// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.Group;
import intranet.GroupDataOnDemand;
import intranet.Module;
import intranet.ModuleAccess;
import intranet.ModuleAccessDataOnDemand;
import intranet.ModuleDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ModuleAccessDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ModuleAccessDataOnDemand: @Component;
    
    private Random ModuleAccessDataOnDemand.rnd = new SecureRandom();
    
    private List<ModuleAccess> ModuleAccessDataOnDemand.data;
    
    @Autowired
    private GroupDataOnDemand ModuleAccessDataOnDemand.groupDataOnDemand;
    
    @Autowired
    private ModuleDataOnDemand ModuleAccessDataOnDemand.moduleDataOnDemand;
    
    public ModuleAccess ModuleAccessDataOnDemand.getNewTransientModuleAccess(int index) {
        ModuleAccess obj = new ModuleAccess();
        setIdgroup(obj, index);
        setIdmodule(obj, index);
        return obj;
    }
    
    public void ModuleAccessDataOnDemand.setIdgroup(ModuleAccess obj, int index) {
        Group idgroup = groupDataOnDemand.getRandomGroup();
        obj.setIdgroup(idgroup);
    }
    
    public void ModuleAccessDataOnDemand.setIdmodule(ModuleAccess obj, int index) {
        Module idmodule = moduleDataOnDemand.getRandomModule();
        obj.setIdmodule(idmodule);
    }
    
    public ModuleAccess ModuleAccessDataOnDemand.getSpecificModuleAccess(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ModuleAccess obj = data.get(index);
        Integer id = obj.getIdmoduleAccess();
        return ModuleAccess.findModuleAccess(id);
    }
    
    public ModuleAccess ModuleAccessDataOnDemand.getRandomModuleAccess() {
        init();
        ModuleAccess obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getIdmoduleAccess();
        return ModuleAccess.findModuleAccess(id);
    }
    
    public boolean ModuleAccessDataOnDemand.modifyModuleAccess(ModuleAccess obj) {
        return false;
    }
    
    public void ModuleAccessDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ModuleAccess.findModuleAccessEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ModuleAccess' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ModuleAccess>();
        for (int i = 0; i < 10; i++) {
            ModuleAccess obj = getNewTransientModuleAccess(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
