// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package models;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import models.GroupRight;

import org.springframework.transaction.annotation.Transactional;

privileged aspect GroupRight_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager GroupRight.entityManager;
    
    public static final EntityManager GroupRight.entityManager() {
        EntityManager em = new GroupRight().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long GroupRight.countGroupRights() {
        return entityManager().createQuery("SELECT COUNT(o) FROM GroupRight o", Long.class).getSingleResult();
    }
    
    public static List<GroupRight> GroupRight.findAllGroupRights() {
        return entityManager().createQuery("SELECT o FROM GroupRight o", GroupRight.class).getResultList();
    }
    
    public static GroupRight GroupRight.findGroupRight(Integer groupRights) {
        if (groupRights == null) return null;
        return entityManager().find(GroupRight.class, groupRights);
    }
    
    public static List<GroupRight> GroupRight.findGroupRightEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM GroupRight o", GroupRight.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void GroupRight.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void GroupRight.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            GroupRight attached = GroupRight.findGroupRight(this.groupRights);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void GroupRight.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void GroupRight.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public GroupRight GroupRight.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        GroupRight merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
