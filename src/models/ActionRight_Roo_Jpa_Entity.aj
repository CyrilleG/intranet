// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package models;

import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;

import models.ActionRight;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ActionRight_Roo_Jpa_Entity {
    
    declare @type: ActionRight: @Entity;
    
    declare @type: ActionRight: @Table(name = "action_right");
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "action_rights", columnDefinition = "INT")
    private Integer ActionRight.actionRights;
    
    public Integer ActionRight.getActionRights() {
        return this.actionRights;
    }
    
    public void ActionRight.setActionRights(Integer id) {
        this.actionRights = id;
    }
    
	@PersistenceContext
	    transient EntityManager ActionRight.entityManager;

	public static final EntityManager ActionRight.entityManager() {
	        EntityManager em = new ActionRight().entityManager;
	        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
	        return em;
	    }

	public static long ActionRight.countActionRights() {
	        return entityManager().createQuery("SELECT COUNT(o) FROM ActionRight o", Long.class).getSingleResult();
	    }

	public static List<ActionRight> ActionRight.findAllActionRights() {
	        return entityManager().createQuery("SELECT o FROM ActionRight o", ActionRight.class).getResultList();
	    }

	public static ActionRight ActionRight.findActionRight(Integer actionRights) {
	        if (actionRights == null) return null;
	        return entityManager().find(ActionRight.class, actionRights);
	    }

	public static List<ActionRight> ActionRight.findActionRightEntries(int firstResult, int maxResults) {
	        return entityManager().createQuery("SELECT o FROM ActionRight o", ActionRight.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
	    }

	@Transactional
	    public void ActionRight.persist() {
	        if (this.entityManager == null) this.entityManager = entityManager();
	        this.entityManager.persist(this);
	    }

	@Transactional
	    public void ActionRight.remove() {
	        if (this.entityManager == null) this.entityManager = entityManager();
	        if (this.entityManager.contains(this)) {
	            this.entityManager.remove(this);
	        } else {
	            ActionRight attached = this;
	            this.entityManager.remove(attached);
	        }
	    }

	@Transactional
	    public void ActionRight.flush() {
	        if (this.entityManager == null) this.entityManager = entityManager();
	        this.entityManager.flush();
	    }

	@Transactional
	    public void ActionRight.clear() {
	        if (this.entityManager == null) this.entityManager = entityManager();
	        this.entityManager.clear();
	    }

	@Transactional
	    public ActionRight ActionRight.merge() {
	        if (this.entityManager == null) this.entityManager = entityManager();
	        ActionRight merged = this.entityManager.merge(this);
	        this.entityManager.flush();
	        return merged;
	    }

}
