// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet.controllers;

import intranet.Filter;
import intranet.Group;
import intranet.GroupFilters;
import intranet.controllers.GroupFiltersController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GroupFiltersController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GroupFiltersController.create(@Valid GroupFilters groupFilters, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, groupFilters);
            return "groupfilterses/create";
        }
        uiModel.asMap().clear();
        groupFilters.persist();
        return "redirect:/groupfilterses/" + encodeUrlPathSegment(groupFilters.getIdgroupFilter().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GroupFiltersController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GroupFilters());
        return "groupfilterses/create";
    }
    
    @RequestMapping(value = "/{idgroupFilter}", produces = "text/html")
    public String GroupFiltersController.show(@PathVariable("idgroupFilter") Integer idgroupFilter, Model uiModel) {
        uiModel.addAttribute("groupfilters", GroupFilters.findGroupFilters(idgroupFilter));
        uiModel.addAttribute("itemId", idgroupFilter);
        return "groupfilterses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GroupFiltersController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("groupfilterses", GroupFilters.findGroupFiltersEntries(firstResult, sizeNo));
            float nrOfPages = (float) GroupFilters.countGroupFilterses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("groupfilterses", GroupFilters.findAllGroupFilterses());
        }
        return "groupfilterses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GroupFiltersController.update(@Valid GroupFilters groupFilters, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, groupFilters);
            return "groupfilterses/update";
        }
        uiModel.asMap().clear();
        groupFilters.merge();
        return "redirect:/groupfilterses/" + encodeUrlPathSegment(groupFilters.getIdgroupFilter().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idgroupFilter}", params = "form", produces = "text/html")
    public String GroupFiltersController.updateForm(@PathVariable("idgroupFilter") Integer idgroupFilter, Model uiModel) {
        populateEditForm(uiModel, GroupFilters.findGroupFilters(idgroupFilter));
        return "groupfilterses/update";
    }
    
    @RequestMapping(value = "/{idgroupFilter}", method = RequestMethod.DELETE, produces = "text/html")
    public String GroupFiltersController.delete(@PathVariable("idgroupFilter") Integer idgroupFilter, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GroupFilters groupFilters = GroupFilters.findGroupFilters(idgroupFilter);
        groupFilters.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/groupfilterses";
    }
    
    void GroupFiltersController.populateEditForm(Model uiModel, GroupFilters groupFilters) {
        uiModel.addAttribute("groupFilters", groupFilters);
        uiModel.addAttribute("filters", Filter.findAllFilters());
        uiModel.addAttribute("groups", Group.findAllGroups());
    }
    
    String GroupFiltersController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
