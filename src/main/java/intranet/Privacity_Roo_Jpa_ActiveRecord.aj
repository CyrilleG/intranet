// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package intranet;

import intranet.Privacity;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Privacity_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Privacity.entityManager;
    
    public static final EntityManager Privacity.entityManager() {
        EntityManager em = new Privacity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Privacity.countPrivacitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Privacity o", Long.class).getSingleResult();
    }
    
    public static List<Privacity> Privacity.findAllPrivacitys() {
        return entityManager().createQuery("SELECT o FROM Privacity o", Privacity.class).getResultList();
    }
    
    public static Privacity Privacity.findPrivacity(Integer idprivacity) {
        if (idprivacity == null) return null;
        return entityManager().find(Privacity.class, idprivacity);
    }
    
    public static List<Privacity> Privacity.findPrivacityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Privacity o", Privacity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Privacity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Privacity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Privacity attached = Privacity.findPrivacity(this.idprivacity);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Privacity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Privacity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Privacity Privacity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Privacity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
